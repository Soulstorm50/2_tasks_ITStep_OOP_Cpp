#ifndef DOUBLYLINKEDLIST_H
#define DOUBLYLINKEDLIST_H

//7.2 Реализовать класс DoublyLinkedList, представляющий собой двунаправленный
//список для удобной работы с целыми числами типа int.
//Список методов – такой же, как у односвязного списка, но с учётом возможности
//перемещения по списку в обратном направлении.

//Все методы двунаправленного списка должны быть хорошо протестированы!
//Коды всех тестов должны прилагаться в мейне.

//IsEmpty (метод возвращает true, если count = 0, и false в обратном случае)
//LastIndexOf (это не шутка  поиск последнего вхождения в список указанного в параметре значения. В результате работы вернуть индекс найденного элемента, а eсли ничего не найдено, вернуть минус 1)
//Reverse (изменение порядка следования элементов в списке на противоположный)
//SortAsc (сортировка значений элементов списка по возрастанию)
//SortDesc (сортировка значений элементов списка по убыванию)
//Shuffle (случайное перемешивание элементов списка)
//Equals (в качестве параметра передаётся указатель на другой односвязный список. Метод сравнивает списки не только по количеству элементов, но и по их значениям)
//Clone (метод создаёт точную копию односвязного списка и возвращает указатель на эту копию c типом SinglyLinkedList)
//Contains (булевский метод, проверяет, а есть ли вообще в списке переданное в качестве параметра значение)
//SetAt (метод устанавливает новое значение для элемента по указанному индексу)
//ToArray (метод создаёт точную копию односвязного списка и возвращает указатель на эту копию, но не с типом SinglyLinkedList, а с типом int*)
//MergeWith (метод присоединяет в конец текущего списка все элементы другого списка, ссылка на который передаётся как параметр)
//перегрузка <, >, <=, >=, ==, !=
//перегрузка =, конструктор копирования, деструктор
//перегрузка [ ] – обращение к элементу по порядковому номеру
//перегрузка + и += (конкатенация списков)
//перегрузка операции явного преобразования в int*


class DoublyLinkedList
{
public:
    DoublyLinkedList();
};

#endif // DOUBLYLINKEDLIST_H
